[{"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\index.tsx":"1","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\reportWebVitals.ts":"2","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\store\\store.ts":"3","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\action\\authAction.ts":"4","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\App.tsx":"5","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\action\\actions.ts":"6","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\reducer\\reducer.ts":"7","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\reducer\\authReducer.ts":"8","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\helper\\helper.ts":"9","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\page\\Home.tsx":"10","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\page\\ManageTask.tsx":"11","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\helper\\task.ts":"12","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\SignUp.tsx":"13","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\Login.tsx":"14","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\OutputTexts.tsx":"15","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\Buttons.tsx":"16","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\Board.tsx":"17","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\NewTaskModal.tsx":"18","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\NewOutputTextModal.tsx":"19","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\OutputTextItem.tsx":"20","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\Task.tsx":"21"},{"size":1088,"mtime":1612864998679,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1612864998808,"results":"24","hashOfConfig":"23"},{"size":868,"mtime":1612864998980,"results":"25","hashOfConfig":"23"},{"size":2228,"mtime":1612864998344,"results":"26","hashOfConfig":"23"},{"size":455,"mtime":1612864998366,"results":"27","hashOfConfig":"23"},{"size":3609,"mtime":1612864998298,"results":"28","hashOfConfig":"23"},{"size":4348,"mtime":1612876232656,"results":"29","hashOfConfig":"23"},{"size":1681,"mtime":1612864998751,"results":"30","hashOfConfig":"23"},{"size":1572,"mtime":1612864998647,"results":"31","hashOfConfig":"23"},{"size":734,"mtime":1612875443428,"results":"32","hashOfConfig":"23"},{"size":1326,"mtime":1612876399709,"results":"33","hashOfConfig":"23"},{"size":360,"mtime":1612864998665,"results":"34","hashOfConfig":"23"},{"size":1287,"mtime":1612875542443,"results":"35","hashOfConfig":"23"},{"size":1039,"mtime":1612875572363,"results":"36","hashOfConfig":"23"},{"size":939,"mtime":1612874978448,"results":"37","hashOfConfig":"23"},{"size":395,"mtime":1612874835235,"results":"38","hashOfConfig":"23"},{"size":1334,"mtime":1612864998420,"results":"39","hashOfConfig":"23"},{"size":1377,"mtime":1612864998533,"results":"40","hashOfConfig":"23"},{"size":1916,"mtime":1612864998503,"results":"41","hashOfConfig":"23"},{"size":1205,"mtime":1612874978432,"results":"42","hashOfConfig":"23"},{"size":1005,"mtime":1612864998615,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"cnzb3q",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\index.tsx",[],["90","91"],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\reportWebVitals.ts",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\store\\store.ts",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\action\\authAction.ts",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\App.tsx",["92"],"import { FC } from \"react\";\nimport { Route, Router, Switch } from \"react-router-dom\";\nimport Home from \"./page/Home\";\nimport ManageTask from \"./page/ManageTask\";\nimport { history } from \"./store/store\";\n\nconst App: FC = () => {\n  return (\n    <>\n      <Router history={history}>\n        <Route exact path=\"/\" render={() => <Home />} />\n        <Route path=\"/manageTask\" render={() => <ManageTask />} />\n      </Router>\n    </>\n  );\n};\nexport default App;\n","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\action\\actions.ts",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\reducer\\reducer.ts",["93","94","95","96"],"import Task from \"../helper/task\";\nimport { isType } from \"typescript-fsa\";\nimport { Action } from \"redux\";\nimport actions from \"../action/actions\";\nimport { cloneArray } from \"../helper/helper\";\nimport { OutputText, State } from \"../types\";\n\nexport type DataState = {\n  tasks: Task[];\n  activeTask: Task | undefined;\n  newTaskModalIsOpen: boolean;\n  newOutputTextModalIsOpen: boolean;\n  states: State[];\n  outputTexts: OutputText[];\n};\n\nconst initialState: DataState = {\n  tasks: [],\n  activeTask: undefined,\n  newTaskModalIsOpen: false,\n  newOutputTextModalIsOpen: false,\n  states: [],\n  outputTexts: [],\n};\n\nconst reducer = (\n  state: DataState = initialState,\n  action: Action\n): DataState => {\n  if (isType(action, actions.setInitialValueAsync.async.done)) {\n    const newTasks: Task[] = [];\n    action.payload.result.tasks.map((resTask) => {\n      const task = new Task(resTask.title, resTask.detail, resTask.state_id);\n      task.setId(resTask.id);\n      newTasks.push(task);\n    });\n    const newOutputTexts: OutputText[] = [];\n    action.payload.result.outputTexts.map((resOutputText) => {\n      const outputText: OutputText = {\n        text: resOutputText.text,\n        stateId: resOutputText.state_id,\n        id: resOutputText.id,\n      };\n      newOutputTexts.push(outputText);\n    });\n    const newStates: State[] = [];\n    action.payload.result.states.map((resState) => {\n      const stateObj: State = {\n        id: resState.id,\n        name: resState.name,\n        selectedOutputTextId: undefined,\n      };\n      newStates.push(stateObj);\n    });\n    return {\n      ...state,\n      tasks: newTasks,\n      outputTexts: newOutputTexts,\n      states: newStates,\n    };\n  } else if (isType(action, actions.createTaskAsync.async.done)) {\n    action.payload.params.setId(action.payload.result.id);\n    const clonedTasks = cloneArray(state.tasks);\n    clonedTasks.push(action.payload.params);\n    return { ...state, tasks: clonedTasks };\n  } else if (isType(action, actions.createTaskAsync.async.failed)) {\n    return { ...state, tasks: state.tasks };\n  } else if (isType(action, actions.updateTaskStateAsync.async.done)) {\n    action.payload.params.task.state = action.payload.params.newState;\n    return {\n      ...state,\n      tasks: state.tasks,\n    };\n  } else if (isType(action, actions.setActiveTask)) {\n    return {\n      ...state,\n      activeTask: action.payload,\n    };\n  } else if (isType(action, actions.resetActiveTask)) {\n    return {\n      ...state,\n      activeTask: undefined,\n    };\n  } else if (isType(action, actions.openNewTaskModal)) {\n    return {\n      ...state,\n      newTaskModalIsOpen: true,\n    };\n  } else if (isType(action, actions.closeNewTaskModal)) {\n    return {\n      ...state,\n      newTaskModalIsOpen: false,\n    };\n  } else if (isType(action, actions.openNewOutputTextModal)) {\n    return {\n      ...state,\n      newOutputTextModalIsOpen: true,\n    };\n  } else if (isType(action, actions.closeNewOutputTextModal)) {\n    return {\n      ...state,\n      newOutputTextModalIsOpen: false,\n    };\n  } else if (isType(action, actions.createOutputTextAsync.async.done)) {\n    state.outputTexts.push({\n      text: action.payload.params.outputText,\n      stateId: action.payload.params.stateId,\n      id: action.payload.result.id,\n    });\n    return {\n      ...state,\n      newTaskModalIsOpen: false,\n    };\n  } else if (isType(action, actions.getStateAsync.async.done)) {\n    action.payload.result.map((stateRes) => {\n      const stateObj: State = {\n        name: stateRes.name,\n        id: stateRes.id,\n        selectedOutputTextId: undefined,\n      };\n      state.states.push(stateObj);\n    });\n    return {\n      ...state,\n      states: state.states,\n    };\n  } else if (isType(action, actions.setSelectedOutputText)) {\n    const newStates = state.states.map((stateObj) => {\n      if (stateObj.id === action.payload.stateId) {\n        stateObj.selectedOutputTextId = action.payload.outputTextId;\n      }\n      return stateObj;\n    });\n    return {\n      ...state,\n      states: newStates,\n    };\n  } else if (isType(action, actions.resetDataState)) {\n    state.tasks = [];\n    state.activeTask = undefined;\n    state.outputTexts = [];\n    state.states = [];\n    state.newOutputTextModalIsOpen = false;\n    state.newTaskModalIsOpen = false;\n    return state;\n  }\n  return state;\n};\n\nexport default reducer;\n","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\reducer\\authReducer.ts",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\helper\\helper.ts",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\page\\Home.tsx",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\page\\ManageTask.tsx",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\helper\\task.ts",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\SignUp.tsx",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\Login.tsx",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\OutputTexts.tsx",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\Buttons.tsx",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\Board.tsx",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\NewTaskModal.tsx",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\NewOutputTextModal.tsx",["97"],"import { Modal } from \"@material-ui/core\";\nimport React, { FC, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport actions from \"../action/actions\";\nimport Task from \"../helper/task\";\nimport { CombinedState, State } from \"../types\";\n\nconst NewOutputTextModal: FC = () => {\n  const dispatch = useDispatch();\n  const isOpen: boolean = useSelector<CombinedState, boolean>(\n    (state) => state.data.newOutputTextModalIsOpen\n  );\n  const states: State[] = useSelector<CombinedState, State[]>(\n    (state) => state.data.states\n  );\n  const [outputText, setOutputText] = useState<string>(\"\");\n  const [selectedStateId, setSelectedStateId] = useState<number>(\n    states[0]?.id ? states[0].id : 1\n  );\n  return (\n    <Modal open={isOpen}>\n      <>\n        <input\n          type=\"text\"\n          value={outputText}\n          onChange={(e) => setOutputText(e.target.value)}\n          placeholder=\"タイトル\"\n        />\n        <select\n          value={selectedStateId}\n          onChange={(e) => setSelectedStateId(Number(e.target.value))}\n        >\n          {states.map((state) => (\n            <option\n              key={state.id}\n              value={state.id}\n              selected={state.id === selectedStateId}\n            >\n              {state.name}\n            </option>\n          ))}\n        </select>\n        <button\n          data-testid=\"newTask\"\n          onClick={() => {\n            dispatch(\n              actions.createOutputTextAsync({\n                outputText,\n                stateId: selectedStateId,\n              })\n            );\n          }}\n        >\n          作成\n        </button>\n        <button\n          data-testid=\"closeNewTaskModal\"\n          onClick={() => {\n            dispatch(actions.closeNewOutputTextModal());\n          }}\n        >\n          閉じる\n        </button>\n      </>\n    </Modal>\n  );\n};\nexport default NewOutputTextModal;\n","C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\OutputTextItem.tsx",[],"C:\\Users\\shima\\Desktop\\workspase\\work\\slackProgress\\red\\front\\src\\components\\Task.tsx",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":2,"column":25,"nodeType":"104","messageId":"105","endLine":2,"endColumn":31},{"ruleId":"106","severity":1,"message":"107","line":32,"column":47,"nodeType":"108","messageId":"109","endLine":32,"endColumn":49},{"ruleId":"106","severity":1,"message":"107","line":38,"column":59,"nodeType":"108","messageId":"109","endLine":38,"endColumn":61},{"ruleId":"106","severity":1,"message":"107","line":47,"column":49,"nodeType":"108","messageId":"109","endLine":47,"endColumn":51},{"ruleId":"106","severity":1,"message":"107","line":115,"column":42,"nodeType":"108","messageId":"109","endLine":115,"endColumn":44},{"ruleId":"102","severity":1,"message":"110","line":5,"column":8,"nodeType":"104","messageId":"105","endLine":5,"endColumn":12},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"@typescript-eslint/no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Task' is defined but never used.","no-global-assign","no-unsafe-negation"]